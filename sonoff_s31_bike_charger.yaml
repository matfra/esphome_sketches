substitutions:
  device_name: "ebike-charger" # Define the base name for your device

# Basic Config
esp8266:
  board: esp01_1m

esphome:
  name: ${device_name}

wifi:
  ssid: none
  password: !secret wifi_password
  ap:
    ssid: "esphome_${device_name}"

captive_portal:

# Remove the following line if you're not using Home Assistsant or your switch will restart every now and again
api:

ota:
  platform: esphome

web_server:
  port: 80

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: "${device_name} WiFi SSID"
    bssid:
      name: "${device_name} Access Point MAC Address"

# Device Specific Config

logger:
  baud_rate: 0 # (UART logging interferes with cse7766)
  logs:
    sensor: INFO # (Overide any global setting, to VERBOSE will spamming the cse7766 sensors)

uart:
  rx_pin: RX
  baud_rate: 4800
  parity: EVEN

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "${device_name} Button"
    on_press:
      - switch.toggle: relay
  - platform: status
    name: "${device_name} Status"
  # Start customizing HERE
  - platform: template
    name: "E-Bike charger status"
    id: charging_status
    device_class: battery_charging

sensor:
  - platform: wifi_signal
    name: "${device_name} WiFi Signal"
    update_interval: 60s
  - platform: cse7766
    current:
      name: "${device_name} Current"
      accuracy_decimals: 2
      filters:
        - throttle_average: 10s
    voltage:
      name: "${device_name} Voltage"
      accuracy_decimals: 2
      filters:
        - throttle_average: 10s
    power:
      name: "${device_name} Power"
      accuracy_decimals: 2
      id: power
      filters:
        - throttle_average: 10s
    energy:
      name: "${device_name} Energy"
      accuracy_decimals: 2
      filters:
        - throttle: 60s
    apparent_power: #(only available with version 2024.3.0 or greater)
      name: "${device_name} Apparent Power"
      filters:
        - throttle_average: 10s
    power_factor: #(only available with version 2024.3.0 or greater)
      name: "${device_name} Power Factor"
      accuracy_decimals: 2
      filters:
        - throttle_average: 10s

  - platform: template
    name: "${device_name} estimated battery charge"
    id: battery_level
    device_class: battery

  - platform: total_daily_energy #(Optional, not specific to cse7766)
    name: "${device_name} Daily Energy"
    power_id: power
    accuracy_decimals: 2

switch:
  - platform: gpio
    name: "${device_name} Relay"
    pin: GPIO12
    id: relay
    restore_mode: RESTORE_DEFAULT_ON

time:
  - platform: sntp #(required for total_daily_energy)
    id: my_time

status_led:
  pin:
    number: GPIO13
    inverted: True

# Configurable Threshold and Timer
number:
  - platform: template
    name: "${device_name} battery target"
    id: battery_target
    unit_of_measurement: "%"
    min_value: 50
    max_value: 100
    step: 1
    optimistic: true
    initial_value: "75"

# Globals for tracking shutdown state
globals:
  - id: power_exceed_timer
    type: int
    restore_value: false
    initial_value: "120"

  - id: shutdown_threshold
    type: float
    restore_value: true
    initial_value: "1.0"

  - id: shutdown_timer
    type: int
    restore_value: false
    initial_value: "120" # Shutdown the charging after 120 seconds above charging power threshold

  - id: power_target
    type: int
    restore_value: false
    initial_value: "110"

  - id: charging_threshold # Above 20W, we are charging
    type: int
    restore_value: false
    initial_value: "20"

# Regularly check the power consumption and enforce logic
interval:
  - interval: 10s
    then:
      - lambda: |-
          if (id(power).state > id(charging_threshold)) {
            id(charging_status).publish_state(true);
            float est_battery_level_pct;
            ESP_LOGD("main", "Power state is %f Watts", id(power).state);
            est_battery_level_pct = 100.0 * ( id(power).state * 0.0433 - 4.0 );
            if ( est_battery_level_pct > 0.0 && est_battery_level_pct <= 100.0 ) {
              id(battery_level).publish_state(est_battery_level_pct);
              ESP_LOGD("main", "Estimated battery percentage: %f ", id(battery_level).state);
            } 
            id(power_target) = (id(battery_target).state / 100.0 + 4.0) / 0.0433;
            ESP_LOGD("main", "Battery charge target is %f percent.", id(battery_target).state);
            ESP_LOGD("main", "Power target threshold will be about %d Watts", id(power_target));
          } else {
            id(charging_status).publish_state(false);
          }

          if (id(power).state > id(power_target)) {
            id(power_exceed_timer) += 10;
            ESP_LOGD("main", "Incremented timer to %d seconds", id(power_exceed_timer));
            ESP_LOGD("main", "Shutdown timer is %d seconds", id(shutdown_timer));
          } else {
            if (id(power_exceed_timer) > 0) {
              id(power_exceed_timer) = 0;
              ESP_LOGI("main", "Resetting timer.");
            }
          }

          if (id(power_exceed_timer) >= id(shutdown_timer)) {
            ESP_LOGI("main", "Threshold exceeded for too long, turning off outlet...");
            id(relay).turn_off();
            id(power_exceed_timer) = 0;  // Reset timer after shutdown
            id(charging_status).publish_state(false); // Update the charging status
          }
